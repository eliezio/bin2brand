buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.5'

    // Basic Plugins
    id 'java'
    id 'groovy'
    id 'application'
    id 'project-report'
    id 'jacoco'

    id 'org.springframework.boot' version '1.5.2.RELEASE'

    // Dependency Management Support Plugins
    id 'com.github.ben-manes.versions' version '0.14.0'

    // Versioning Plugins
    id 'nebula.release' version '4.1.1'
    id 'nebula.info' version '3.5.0'
    id 'com.gorylenko.gradle-git-properties' version '1.4.17'

    // Quality / Documentation Plugins
    id 'nebula.lint' version '6.8.0'
    id 'org.sonarqube' version '2.2.1'
    id 'org.asciidoctor.convert' version '1.5.3'

    // Docker
    id 'com.bmuschko.docker-java-application' version '3.0.5'
}

apply from: 'gradle/integration-test.gradle'
apply from: 'gradle/jacoco.gradle'
apply from: 'gradle/sonarqube.gradle'
apply from: 'gradle/asciidoctor.gradle'
apply from: 'gradle/ben-manes.versions.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'io.eliez.fintools'
mainClassName = "${project.group}.${project.name}.boot.Application"

gradleLint {
    criticalRules = ['duplicate-dependency-class']
}

ext {
    spockReportsVersion = '1.2.13'
    streamExVersion = '0.6.5'
    // See gradle.properties for overrides on Spring Boot managed dependencies

    organization = 'ebo'
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

repositories {
    jcenter()
}

configurations {
    compile {
        exclude module: 'spring-boot-starter-tomcat'
        exclude module: 'groovy'
    }
}

dependencies {
    compileOnly(
            [group: 'org.projectlombok', name: 'lombok'],
    )
    compile(
            [group: 'one.util', name: 'streamex', version: streamExVersion],

            [group: 'org.springframework.boot', name: 'spring-boot'],
            [group: 'org.springframework.boot', name: 'spring-boot-autoconfigure'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-validation'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-web'],
            [group: 'javax.servlet', name: 'javax.servlet-api'],
            [group: 'org.slf4j', name: 'slf4j-api'],
    )
    runtime(
            [group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-undertow'],

            [group: 'com.fasterxml.jackson.core', name: 'jackson-core'],
            [group: 'com.fasterxml.jackson.core', name: 'jackson-databind'],

            [group: 'ch.qos.logback', name: 'logback-classic'],
            [group: 'ch.qos.logback', name: 'logback-access'],
    )
    testCompileOnly(
            [group: 'org.projectlombok', name: 'lombok'],
    )
    testCompile(
            [group: 'org.codehaus.groovy', name: 'groovy-all'],
            [group: 'org.spockframework', name: 'spock-core'],
    )
    testRuntime(
            [group: 'com.athaydes', name: 'spock-reports', version: spockReportsVersion],
    )

    integrationTestCompileOnly(
            [group: 'org.projectlombok', name: 'lombok'],
    )
    integrationTestCompile(
            [group: 'org.codehaus.groovy', name: 'groovy-all'],
            [group: 'org.spockframework', name: 'spock-core'],
            [group: 'org.springframework', name: 'spring-beans'],
            [group: 'org.springframework', name: 'spring-test'],
            [group: 'org.springframework.boot', name: 'spring-boot-test-autoconfigure'],
            [group: 'org.hamcrest', name: 'hamcrest-core'],
            [group: 'org.springframework.restdocs', name: 'spring-restdocs-core'],
            [group: 'org.springframework.restdocs', name: 'spring-restdocs-mockmvc'],

            // Required by org.springframework.test.web.servlet.result.MockMvcResultHandlers that references
            // org.apache.commons.logging.Log
            // Only happens with the Groovy compiler!
            [group: 'org.slf4j', name: 'jcl-over-slf4j'],
    )
    integrationTestRuntime(
            [group: 'org.spockframework', name: 'spock-spring'],
            [group: 'org.springframework.boot', name: 'spring-boot-test'],
            [group: 'org.mockito', name: 'mockito-core'],
            [group: 'com.jayway.jsonpath', name: 'json-path'],
            [group: 'com.athaydes', name: 'spock-reports', version: spockReportsVersion],
    )
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
}

tasks.withType(Test) {
    systemProperties = System.properties as Map<String, ?>

    // show standard out and standard error of the test JVM(s) on the console
    testLogging {
        events 'started', 'passed', 'skipped', 'failed'
        showStandardStreams = true
    }
}

// plugin: distributions
distributions {
    main {
        contents {
            from('config') {
                into 'config'
            }
        }
    }
}

// plugin: com.gorylenko.gradle-git-properties
gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
}

// plugin: spring-boot
springBoot {
    buildInfo()
}

bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties as Map<String, ?>
}

dockerDistTar {
    environmentVariable 'JAVA_OPTS', '-Xmx384m -Djava.security.egd=file:/dev/./urandom'
}

docker {
    url = System.properties['docker.host']
    javaApplication {
        baseImage = 'davidcaste/alpine-java-unlimited-jce'
        maintainer = 'Eliezio Oliveira "ebo@pobox.com"'
        tag = System.properties['docker.registry'] + "/${organization}/${project.name}:" + ("${version}" - ~/-.*/)
    }
}

